{
  "folderName": "instructions",
  "folderPath": ".autodoc/docs/json/programs/liquidity-incentive-program/src/instructions",
  "url": "https://github.com/mrgnlabs/marginfi-v2/.autodoc/docs/json/programs/liquidity-incentive-program/src/instructions",
  "files": [
    {
      "fileName": "create_campaign.rs",
      "filePath": "programs/liquidity-incentive-program/src/instructions/create_campaign.rs",
      "url": "https://github.com/mrgnlabs/marginfi-v2/programs/liquidity-incentive-program/src/instructions/create_campaign.rs",
      "summary": "The `process` function in this code file is used to create a new campaign for the MarginFi-v2 project. The purpose of this function is to initialize a new campaign with certain parameters and create the necessary accounts for it. \n\nThe function takes in four parameters: `ctx`, `lockup_period`, `max_deposits`, and `max_rewards`. `ctx` is a context object that contains information about the program's state and accounts. `lockup_period` is the amount of time that funds deposited into the campaign will be locked up for. `max_deposits` is the maximum amount of funds that can be deposited into the campaign, and `max_rewards` is the maximum amount of rewards that can be distributed to campaign participants.\n\nThe function first checks that `max_deposits` is greater than 0 using the `require_gt!` macro. It then transfers `max_rewards` tokens from the `funding_account` to the `campaign_reward_vault` account using the `transfer` function from the `Token` program. \n\nNext, the function initializes a new `Campaign` account using the `set_inner` method. This account contains information about the campaign, such as the `admin` key, `lockup_period`, `max_deposits`, `remaining_capacity`, `max_rewards`, and `marginfi_bank_pk`. The `marginfi_bank_pk` is the public key of the MarginFi bank account associated with the campaign.\n\nFinally, the function returns `Ok(())` to indicate that the operation was successful.\n\nThe `CreateCampaign` struct is used to define the accounts required for the `process` function. It contains six fields: `campaign`, `campaign_reward_vault`, `campaign_reward_vault_authority`, `asset_mint`, `marginfi_bank`, and `admin`. These accounts are used to store information about the campaign and its associated assets.\n\nOverall, this code file is an important part of the MarginFi-v2 project as it allows for the creation of new campaigns and the management of associated accounts. It is likely used in conjunction with other functions and modules to provide a complete set of features for the project.",
      "questions": "1. What is the purpose of this code and what does it do?\n   \n   This code creates a new campaign and initializes its parameters such as lockup period, maximum deposits, and maximum rewards. It also transfers tokens to the campaign reward vault and sets the campaign's inner state.\n\n2. What external dependencies does this code have?\n   \n   This code depends on several external crates and modules such as `anchor_lang`, `anchor_spl`, and `marginfi`. It also uses the `std::mem` module to get the size of a type.\n\n3. What are the requirements for the accounts used in this code?\n   \n   The `CreateCampaign` struct contains several accounts that have specific requirements. The `campaign` and `campaign_reward_vault` accounts need to be initialized and have a specific size. The `campaign_reward_vault` account also needs to have a specific authority derived from a seed. The `asset_mint` account needs to match the mint of the `marginfi_bank` account. The `admin` and `funding_account` accounts need to be mutable and signed. Finally, the `rent`, `token_program`, and `system_program` accounts are system accounts that are used by the Solana blockchain."
    },
    {
      "fileName": "create_deposit.rs",
      "filePath": "programs/liquidity-incentive-program/src/instructions/create_deposit.rs",
      "url": "https://github.com/mrgnlabs/marginfi-v2/programs/liquidity-incentive-program/src/instructions/create_deposit.rs",
      "summary": "The `process` function in this code file creates a new deposit in an active liquidity incentive campaign (LIP). The function takes in a context struct containing the relevant accounts for the new deposit and the amount of tokens to be deposited. The function first checks if the relevant campaign is active and if the deposit amount exceeds the amount of remaining deposits that can be made into the campaign. If these checks pass, the function transfers the specified amount of tokens from the funding account to a temporary token account. It then initializes a new Marginfi account using a CPI call to the `marginfi_account_initialize` function. This function creates a new Marginfi account and sets the authority to the deposit signer. The function then makes another CPI call to the `lending_account_deposit` function, which deposits the specified amount of tokens into the Marginfi account. After this, the function closes the temporary token account and sets the deposit's inner account to a new `Deposit` struct containing the deposit owner, campaign, amount, and start time. Finally, the function updates the remaining capacity of the campaign and returns `Ok(())` if the deposit was successfully made.\n\nThis function is a crucial part of the marginfi-v2 project as it allows users to deposit tokens into active liquidity incentive campaigns. The function ensures that the campaign is active and that the deposit amount is valid before transferring the tokens and creating a new Marginfi account. The function also updates the remaining capacity of the campaign and sets the deposit's inner account to a new `Deposit` struct. This function can be called by users who want to participate in liquidity incentive campaigns and earn rewards for providing liquidity. \n\nExample usage:\n```\nlet deposit_amount = 100;\nlet ctx = Context::default();\nprocess(ctx, deposit_amount)?;\n```",
      "questions": "1. What is the purpose of this code and what problem does it solve?\n   \n   This code creates a new deposit in an active liquidity incentive campaign (LIP) by transferring tokens from a funding account to a temporary token account, initializing a Marginfi account, depositing tokens into a lending account, and closing the temporary token account. This code solves the problem of enabling users to deposit tokens into a LIP and earn rewards.\n\n2. What are the requirements for running this code?\n   \n   This code requires the `anchor_lang`, `anchor_spl`, and `marginfi` crates to be imported, as well as several constants and state structs defined in other files. It also requires a context struct containing relevant accounts for the new deposit, including a campaign account, signer account, deposit account, temporary token account, asset mint account, Marginfi group account, Marginfi bank account, Marginfi account, Marginfi bank vault account, and several program accounts.\n\n3. What are the potential errors that could occur when running this code?\n   \n   This code could potentially return two errors: `LIPError::CampaignNotActive` if the relevant campaign is not active, and `LIPError::DepositAmountTooLarge` if the deposit amount exceeds the amount of remaining deposits that can be made into the campaign. Additionally, the code could fail if any of the CPI calls or assertions fail, or if there are issues with the accounts or tokens involved in the deposit process."
    },
    {
      "fileName": "end_deposit.rs",
      "filePath": "programs/liquidity-incentive-program/src/instructions/end_deposit.rs",
      "url": "https://github.com/mrgnlabs/marginfi-v2/programs/liquidity-incentive-program/src/instructions/end_deposit.rs",
      "summary": "The `process` function in this code file is responsible for closing a deposit and returning the initial deposit plus earned rewards from a liquidity incentive campaign back to the liquidity depositor after a lockup period has ended. This function takes in a context of the deposit to be closed and returns a `Result` object which is `Ok(())` if the deposit is closed and tokens are transferred successfully. \n\nThe function first checks if the lockup period has passed by comparing the Solana clock timestamp to the deposit start time plus the lockup period. If the lockup period has not been reached, an error is returned. \n\nNext, the function calls the `marginfi::cpi::lending_account_withdraw` function to redeem the shares with Marginfi. The function then calculates additional rewards that need to be paid out based on guaranteed yield. This is done by calculating the difference between guaranteed yield and actual yield. If there are additional rewards to be paid out, the function transfers them to the ephemeral token account. \n\nThe total amount is then transferred to the user, and the temp token account is closed. If any of these steps fail, an error is returned. \n\nThe `EndDeposit` struct contains all the accounts required for the `process` function to execute. These accounts include the campaign, campaign reward vault, deposit, marginfi account, marginfi bank, token account, and various program accounts. \n\nOverall, this code file is an important part of the marginfi-v2 project as it handles the closing of deposits and the transfer of tokens back to depositors.",
      "questions": "1. What is the purpose of this code and what does it do?\n   \n   This code is a function called `process` that closes a deposit and returns the initial deposit + earned rewards from a liquidity incentive campaign back to the liquidity depositor after a lockup period has ended. It also transfers any additional rewards to an ephemeral token account and then transfers the total amount to the user.\n\n2. What are the potential errors that could occur while running this code?\n   \n   The potential errors that could occur while running this code are:\n   \n   * Solana clock timestamp is less than the deposit start time plus the lockup period (i.e. the lockup has not been reached)\n   * Bank redeem shares operation fails\n   * Reloading ephemeral token account fails\n   * Transferring additional reward to ephemeral token account fails\n   * Reloading ephemeral token account after transfer fails\n\n3. What are the required accounts and constraints for running this code?\n   \n   The required accounts and constraints for running this code are:\n   \n   * A `Campaign` account that is specified in the `deposit` account\n   * A `TokenAccount` called `campaign_reward_vault` that is derived from the `Campaign` account\n   * A `Signer` account that is the owner of the `deposit` account\n   * A `Deposit` account that is being closed\n   * A `TokenAccount` called `temp_token_account` that is initialized with a `mint` and `authority` specified in the `EndDeposit` struct\n   * A `Bank` account that is specified in the `Campaign` account\n   * A `TokenAccount` called `marginfi_bank_vault` that is specified in the `Bank` account\n   * A `marginfi_program` account\n   * A `token_program` account\n   * A `system_program` account"
    },
    {
      "fileName": "mod.rs",
      "filePath": "programs/liquidity-incentive-program/src/instructions/mod.rs",
      "url": "https://github.com/mrgnlabs/marginfi-v2/programs/liquidity-incentive-program/src/instructions/mod.rs",
      "summary": "This code is a module that contains three sub-modules: `create_campaign`, `create_deposit`, and `end_deposit`. It also re-exports all the items from these sub-modules using the `pub use` statement. \n\nThe purpose of this module is to provide a centralized location for the functions related to creating and ending deposits and campaigns. By organizing these functions into separate sub-modules, the codebase becomes more modular and easier to maintain. \n\nFor example, if a developer needs to create a new deposit, they can simply import the `create_deposit` module and use the functions provided there. Similarly, if they need to end a deposit, they can import the `end_deposit` module and use the functions provided there. \n\nHere is an example of how a developer might use this module:\n\n```rust\nuse marginfi_v2::{create_deposit, end_deposit};\n\nlet deposit = create_deposit::create_new_deposit();\n// ... do some work with the deposit ...\n\nend_deposit::end_deposit(deposit);\n```\n\nIn this example, the developer first imports the `create_deposit` module and uses the `create_new_deposit` function to create a new deposit. They then do some work with the deposit, and finally import the `end_deposit` module and use the `end_deposit` function to end the deposit. \n\nOverall, this module provides a convenient way to organize and use the functions related to deposits and campaigns in the larger `marginfi-v2` project.",
      "questions": "1. **What is the purpose of this module?** \n    This module appears to be a collection of sub-modules related to creating and ending deposits and campaigns in the MarginFi-v2 project.\n\n2. **What is the difference between the `create_deposit` and `end_deposit` sub-modules?**\n    The `create_deposit` sub-module likely contains functions related to creating new deposits, while the `end_deposit` sub-module likely contains functions related to ending or closing existing deposits.\n\n3. **Why are the sub-modules being re-exported using `pub use`?**\n    The `pub use` statements allow the functions and types defined in the sub-modules to be accessed directly from the parent module, without needing to specify the sub-module name. This can make the code more concise and easier to read."
    }
  ],
  "folders": [],
  "summary": "The `instructions` folder in the `liquidity-incentive-program` subdirectory of the `marginfi-v2` project contains code files that are responsible for creating and managing liquidity incentive campaigns. \n\nThe `create_campaign.rs` file contains a function that creates a new campaign for the MarginFi-v2 project. This function initializes a new campaign with certain parameters and creates the necessary accounts for it. The `create_deposit.rs` file contains a function that allows users to deposit tokens into active liquidity incentive campaigns. The function ensures that the campaign is active and that the deposit amount is valid before transferring the tokens and creating a new Marginfi account. The `end_deposit.rs` file contains a function that handles the closing of deposits and the transfer of tokens back to depositors after a lockup period has ended. \n\nThese code files are important parts of the MarginFi-v2 project as they allow for the creation and management of liquidity incentive campaigns. They work together with other parts of the project to provide a complete set of features for users who want to participate in liquidity incentive campaigns and earn rewards for providing liquidity. \n\nFor example, a developer might use the `create_campaign` function to create a new campaign and then use the `create_deposit` function to allow users to deposit tokens into the campaign. The `end_deposit` function can then be used to handle the closing of deposits and the transfer of tokens back to depositors after a lockup period has ended. \n\nHere is an example of how a developer might use these functions:\n\n```rust\nuse marginfi_v2::liquidity_incentive_program::instructions::{create_campaign, create_deposit, end_deposit};\n\nlet ctx = Context::default();\nlet lockup_period = 60;\nlet max_deposits = 1000;\nlet max_rewards = 10000;\n\ncreate_campaign::process(ctx, lockup_period, max_deposits, max_rewards)?;\n\nlet deposit_amount = 100;\nlet deposit_ctx = Context::default();\ncreate_deposit::process(deposit_ctx, deposit_amount)?;\n\nlet end_deposit_ctx = Context::default();\nend_deposit::process(end_deposit_ctx)?;\n```\n\nIn this example, the developer first uses the `create_campaign` function to create a new campaign with a lockup period of 60 seconds, a maximum of 1000 deposits, and a maximum of 10000 rewards. They then use the `create_deposit` function to allow a user to deposit 100 tokens into the campaign. Finally, they use the `end_deposit` function to handle the closing of the deposit and the transfer of tokens back to the user after the lockup period has ended. \n\nOverall, the code in these files provides a convenient way to create and manage liquidity incentive campaigns in the MarginFi-v2 project.",
  "questions": ""
}