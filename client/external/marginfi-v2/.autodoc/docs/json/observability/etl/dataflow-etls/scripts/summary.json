{
  "folderName": "scripts",
  "folderPath": ".autodoc/docs/json/observability/etl/dataflow-etls/scripts",
  "url": "https://github.com/mrgnlabs/marginfi-v2/.autodoc/docs/json/observability/etl/dataflow-etls/scripts",
  "files": [
    {
      "fileName": "create_events.sh",
      "filePath": "observability/etl/dataflow-etls/scripts/create_events.sh",
      "url": "https://github.com/mrgnlabs/marginfi-v2/observability/etl/dataflow-etls/scripts/create_events.sh",
      "summary": "This code is a Bash script that interacts with the MarginFi-v2 project. The script sets up a new MarginFi profile, creates a group, and adds a USDC bank to the group. It then configures the USDC bank and the SOL bank, and performs a series of actions to simulate a liquidation event.\n\nThe script starts by setting some environment variables, including the group ID, program ID, and new profile name. It then checks that the program ID and new profile name have been specified, and exits if they have not.\n\nThe script then adds a USDC bank to the group using the `mfi group add-bank` command. This command takes a number of arguments that configure the bank, including the mint address, asset and liability weights, deposit and borrow limits, and various fees. The script sets these arguments to specific values, but they could be customized as needed.\n\nAfter adding the USDC bank, the script configures the SOL bank using the `mfi bank update` command. This command sets the asset and liability weights for the bank to 1, which means that the bank will always be fully utilized.\n\nThe script then performs a series of actions to simulate a liquidation event. It creates a new MarginFi account for a liquidatee, deposits SOL and USDC into the appropriate banks, borrows USDC, and then triggers a bad health event by setting the SOL asset weights to 0. This causes the liquidatee's account to become undercollateralized, and the script simulates a liquidation by having a liquidator create a new MarginFi account, deposit USDC to pay off the liquidatee's debt, and then liquidate the liquidatee's account for half its assets. Finally, the script handles the remainder of the bad debt through the `mfi group handle-bankruptcy` command.\n\nOverall, this script is a useful tool for testing the MarginFi-v2 project and simulating various scenarios, such as liquidations and bankruptcies. It could be customized to test different configurations and scenarios, and could be integrated into a larger testing framework for the project.",
      "questions": "1. What is the purpose of this script?\n   \n   This script is used to create and configure banks for the MarginFi-v2 project, and to simulate various actions such as lending, borrowing, and liquidation.\n\n2. What dependencies does this script have?\n   \n   This script requires the MarginFi CLI tool to be installed, as well as access to a Solana devnet node and a Solana keypair.\n\n3. What actions are being simulated in this script?\n   \n   This script simulates a user lending USDC, creating a new MarginFi account, depositing SOL, borrowing USDC, triggering bad health by setting SOL asset weights to 0, liquidating a MarginFi account, and handling bad debt through bankruptcy."
    },
    {
      "fileName": "playground.py",
      "filePath": "observability/etl/dataflow-etls/scripts/playground.py",
      "url": "https://github.com/mrgnlabs/marginfi-v2/observability/etl/dataflow-etls/scripts/playground.py",
      "summary": "This code is a part of the Marginfi-v2 project and is responsible for parsing transaction data and logs related to the project. The code imports various libraries such as `pathlib`, `pprint`, `based58`, `anchorpy`, `solana`, `solders`, and `idl`. The `sample_logs` variable contains a list of logs that are generated when a transaction is executed. The `sample_inner_ixs` variable contains a list of inner instructions that are executed as part of the transaction. The `sample_message` variable contains the encoded message of the transaction.\n\nThe code reads the `marginfi-v2.json` file and creates an instance of the `Idl` class. It then creates an instance of the `Program` class using the `idl` instance and a program ID. The `ix_data` variable contains the instruction data of the first instruction in the transaction. The instruction data is decoded using the `based58` library and parsed using the `program.coder.instruction.parse()` method. The parsed instruction data is then printed to the console.\n\nThe code also contains commented-out code that demonstrates how to merge instructions and CPIs, expand instructions, and reconcile instruction logs. It also contains commented-out code that demonstrates how to parse events using the `EventCoder` and `EventParser` classes.\n\nOverall, this code is an important part of the Marginfi-v2 project as it allows developers to parse transaction data and logs, which is essential for debugging and monitoring the project.",
      "questions": "1. What is the purpose of this code?\n- This code appears to be interacting with a Solana blockchain network and using the `anchorpy` library to work with an IDL for a project called marginfi-v2.\n\n2. What is the significance of the `sample_logs`, `sample_inner_ixs`, and `sample_message` variables?\n- These variables appear to be sample data used for testing and debugging purposes. `sample_logs` contains a list of strings that represent logs generated by a Solana program, `sample_inner_ixs` contains a list of dictionaries representing inner instructions, and `sample_message` contains a base58-encoded message.\n\n3. What is the purpose of the `parsed` variable?\n- The `parsed` variable is used to store the result of parsing a base58-encoded message using the `program.coder.instruction.parse()` method. It is likely used to extract relevant information from the message for further processing."
    }
  ],
  "folders": [],
  "summary": "The `create_events.sh` file is a Bash script that interacts with the MarginFi-v2 project to simulate a liquidation event. The script sets up a new MarginFi profile, creates a group, adds a USDC bank to the group, configures the USDC bank and the SOL bank, and performs a series of actions to simulate a liquidation event. This script is a useful tool for testing the MarginFi-v2 project and simulating various scenarios, such as liquidations and bankruptcies.\n\nThe `playground.py` file is responsible for parsing transaction data and logs related to the Marginfi-v2 project. The code imports various libraries such as `pathlib`, `pprint`, `based58`, `anchorpy`, `solana`, `solders`, and `idl`. The code reads the `marginfi-v2.json` file and creates an instance of the `Idl` class. It then creates an instance of the `Program` class using the `idl` instance and a program ID. The code parses the instruction data of the first instruction in the transaction and prints it to the console. The code also contains commented-out code that demonstrates how to merge instructions and CPIs, expand instructions, and reconcile instruction logs. It also contains commented-out code that demonstrates how to parse events using the `EventCoder` and `EventParser` classes.\n\nThese files might fit into the larger MarginFi-v2 project by providing developers with tools to test and debug the project. The `create_events.sh` script can be customized to test different configurations and scenarios, and could be integrated into a larger testing framework for the project. The `playground.py` file can be used to parse transaction data and logs, which is essential for debugging and monitoring the project.\n\nFor example, a developer might use the `create_events.sh` script to test the MarginFi-v2 project's liquidation functionality by simulating a liquidation event. The developer could customize the script to test different configurations and scenarios, such as different asset and liability weights, deposit and borrow limits, and various fees. The developer could also integrate the script into a larger testing framework for the project.\n\nA developer might use the `playground.py` file to parse transaction data and logs to debug and monitor the MarginFi-v2 project. The developer could use the code to parse instruction data, merge instructions and CPIs, expand instructions, and reconcile instruction logs. The developer could also use the code to parse events using the `EventCoder` and `EventParser` classes.\n\nOverall, these files provide important tools for testing, debugging, and monitoring the MarginFi-v2 project. Developers can use these tools to customize and test different configurations and scenarios, and to parse transaction data and logs for debugging and monitoring purposes.",
  "questions": ""
}